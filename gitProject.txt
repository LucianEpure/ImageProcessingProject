#include "stdafx.h"
#include "common.h"
#include <iostream>

#define PATCH_SIZE 15
#define ALPHA 0.4

typedef struct point {
	int x, y, val;
}Tpoint;

typedef struct atmLight {
	int red, blue, green;
}Tatm;

int getMinFromPatch(int x, int y, Mat src) {
	int startI = max(x - PATCH_SIZE / 2, 0);
	int endI = min(x + PATCH_SIZE / 2, src.rows - 1);
	int startJ = max(y - PATCH_SIZE / 2, 0);
	int endJ = min(y + PATCH_SIZE / 2, src.cols - 1);

	int minR = src.at<Vec3b>(x, y)[2];
	int minG = src.at<Vec3b>(x, y)[1];
	int minB = src.at<Vec3b>(x, y)[0];

	Vec3b pixel;
	for (int i = startI; i <= endI; i++) {
		for (int j = startJ; j <= endJ; j++) {
			pixel = src.at<Vec3b>(i, j);
			if (pixel[2] < minR) minR = pixel[2];
			if (pixel[1] < minG) minG = pixel[1];
			if (pixel[0] < minB) minB = pixel[0];
		}
	}
	return min(min(minR, minG), minB);
}

int getMaxFromPatch(int x, int y, Mat src) {
	int startI = max(x - PATCH_SIZE / 2, 0);
	int endI = min(x + PATCH_SIZE / 2, src.rows - 1);
	int startJ = max(y - PATCH_SIZE / 2, 0);
	int endJ = min(y + PATCH_SIZE / 2, src.cols - 1);

	int maxR = src.at<Vec3b>(x, y)[2];
	int maxG = src.at<Vec3b>(x, y)[1];
	int maxB = src.at<Vec3b>(x, y)[0];

	Vec3b pixel;
	for (int i = startI; i <= endI; i++) {
		for (int j = startJ; j <= endJ; j++) {
			pixel = src.at<Vec3b>(i, j);
			if (pixel[2] > maxR) maxR = pixel[2];
			if (pixel[1] > maxG) maxG = pixel[1];
			if (pixel[0] > maxB) maxB = pixel[0];
		}
	}
	return max(max(maxR, maxG), maxB);
}

Mat darkChannelPrior(Mat src) {
	Mat dest;
	dest = Mat(src.rows, src.cols, CV_8UC1);
	printf("Size of source is (%d x %d)", src.rows, src.cols);
	for (int i = 0; i < src.rows; i++) {
		for (int j = 0; j < src.cols; j++) {
			dest.at<uchar>(i, j) = getMinFromPatch(i, j, src);
		}
	}
	return dest;
}

Mat brightChannelPrior(Mat src) {
	Mat dest;
	dest = Mat(src.rows, src.cols, CV_8UC1);
	printf("Size of source is (%d x %d)", src.rows, src.cols);
	for (int i = 0; i < src.rows; i++) {
		for (int j = 0; j < src.cols; j++) {
			dest.at<uchar>(i, j) = getMaxFromPatch(i, j, src);
		}
	}
	return dest;
}

Mat differenceChannel(Mat bright, Mat dark) {
	Mat dest = Mat(bright.rows, bright.cols, CV_8UC1);
	for (int i = 0; i < bright.rows; i++) {
		for (int j = 0; j < bright.cols; j++) {
			dest.at<uchar>(i, j) = bright.at<uchar>(i, j) - dark.at<uchar>(i, j);
		}
	}
	return dest;
}

Mat imageTransformerInterface(Mat(*f)(Mat)) {
	char fname[MAX_PATH];
	Mat src, dest;
	while (openFileDlg(fname))
	{
		src = imread(fname, CV_LOAD_IMAGE_COLOR);
		dest = f(src);
		//	imshow("src", src);
		//	imshow("dest", dest);
	}
	return dest;
}

Tatm getAtmosphericLight(Mat brightChannel, Mat originalImage) {

	Mat src = brightChannel;
	int i, j;
	int topTen = 0;
	int totalSource = src.rows * src.cols;
	topTen = (10 * totalSource) / 100;
	int topTenClone = topTen;
	std::multimap<int, Point2i> pixelMap;
	Tatm atmosphericLight;
	atmosphericLight.blue = 0;
	atmosphericLight.green = 0;
	atmosphericLight.red = 0;

	bool fullArray = false;
	int pixArray[256];
	std::vector<Point2i> pixVector;
	float topTenSum = 0;

	for (i = 0; i < 256; i++)
	{
		pixArray[i] = 0;
	}

	for (i = 0; i < src.rows; i++) {
		for (j = 0; j < src.cols; j++) {
			pixArray[src.at<uchar>(i, j)]++;
			pixelMap.insert(std::pair<int, Point2i>(src.at<uchar>(i, j), Point2i(i, j)));
		}
	}
	for (i = 0; i < sizeof(pixArray) / sizeof(int); i++)
		std::cout << i << " " << pixArray[i] << "\n";

	std::cout << "topTen float:" << (float)topTen << "\n";
	i = sizeof(pixArray) / sizeof(int);
	while (topTenClone != 0) {

		std::pair<std::multimap<int, Point2i>::iterator, std::multimap<int, Point2i>::iterator> ret;
		ret = pixelMap.equal_range(i);

		for (std::multimap<int, Point2i>::iterator it = ret.first; it != ret.second; ++it)
		{
			pixVector.push_back(it->second);
		}
		while ((pixArray[i] > 0) && (topTenClone != 0)) {
			topTenClone--;
			pixArray[i]--;
		}
		i--;
	}
	float blueSum = 0.0f;
	float greenSum = 0.0f;
	float redSum = 0.0f;
	for (i = 0; i < topTen; i++) {
		//goodVector.push_back(pixVector.at(i));
		blueSum = blueSum + (float)originalImage.at<Vec3b>(pixVector.at(i).x, pixVector.at(i).y)[0] / topTen;
		greenSum = greenSum + (float)originalImage.at<Vec3b>(pixVector.at(i).x, pixVector.at(i).y)[1] / topTen;
		redSum = redSum + (float)originalImage.at<Vec3b>(pixVector.at(i).x, pixVector.at(i).y)[2] / topTen;
		//std::cout<<"TOPTEN:"<<topTen<<" I="<<i<< ": [ " << goodVector.at(i).x << ", "<<goodVector.at(i).y<<"]"<<std::endl;
	}
	std::cout << blueSum << " " << redSum << " " << greenSum << std::endl;
	atmosphericLight.blue = trunc(blueSum);
	atmosphericLight.red = trunc(redSum);
	atmosphericLight.green = trunc(greenSum);
	std::cout << "R:" << redSum << " G:" << greenSum << " B:" << blueSum << std::endl;
	return atmosphericLight;
}

Mat computeTrans(Mat channel, Tatm atmosphericLight, int color, int value) {
	int i, j;
	Mat trans = Mat::zeros(channel.rows, channel.cols, CV_32FC1);
	int atmosphericLightForColor = 0;
	if (color == 0) {
		atmosphericLightForColor = atmosphericLight.blue;
	}
	else if (color == 1) {
		atmosphericLightForColor = atmosphericLight.green;
	}
	else if (color == 2) {
		atmosphericLightForColor = atmosphericLight.red;
	}

	for (i = 0; i < channel.rows; i++) {
		for (j = 0; j < channel.cols; j++) {
			trans.at<float>(i, j) = (float)(channel.at<uchar>(i, j) - atmosphericLightForColor) / (value - atmosphericLightForColor);
		}
	}
	return trans;
}

Mat normalize(Mat src) {
	Mat dest = Mat::zeros(src.rows, src.cols, CV_8UC1);
	int minOut = 0, maxOut = 255;
	int maxIn = src.at<float>(0, 0);
	int minIn = src.at<float>(0, 0);

	for (int i = 0; i < src.rows; i++) {
		for (int j = 0; j < src.cols; j++) {
			if (src.at<float>(i, j) < minIn) minIn = src.at<float>(i, j);
			if (src.at<float>(i, j) > maxIn) maxIn = src.at<float>(i, j);
		}
	}

	for (int i = 0; i < src.rows; i++) {
		for (int j = 0; j < src.cols; j++) {
			dest.at<uchar>(i, j) = minOut + ((float)(src.at<float>(i, j) - minIn) / (maxIn - minIn)) * (maxOut - minOut);
		}
	}
	return dest;
}

boolean equalMat(Mat mat1, Mat mat2) {
	if (mat1.rows != mat2.rows) return false;
	if (mat1.cols != mat2.cols) return false;
	for (int i = 0; i < mat1.rows; i++) {
		for (int j = 0; j <mat1.cols; j++) {
			if (mat1.at<uchar>(i, j) != mat2.at<uchar>(i, j)) return false;
		}
	}
	return true;
}

void transmissionView(Mat blue, Mat green, Mat red, std::string name) {
	Mat blueNorm = normalize(blue);
	Mat greenNorm = normalize(green);
	Mat redNorm = normalize(red);

	Mat transDest = Mat(blue.rows, blue.cols, CV_8UC3);
	for (int i = 0; i < blue.rows; i++) {
		for (int j = 0; j < blue.cols; j++) {
			transDest.at<Vec3b>(i, j)[0] = blueNorm.at<uchar>(i, j);
			transDest.at<Vec3b>(i, j)[1] = greenNorm.at<uchar>(i, j);
			transDest.at<Vec3b>(i, j)[2] = redNorm.at<uchar>(i, j);
		}
	}
	//imshow("on red", redNorm);
	//imshow("on blue", blueNorm);
	//imshow("on green", greenNorm);
	imshow(name, transDest);
}

Mat correctTransmission(Mat diffChannel, Mat brightTrans, Mat darkTrans) {
	Mat correctedTrans = Mat::zeros(brightTrans.rows, brightTrans.cols, CV_32FC1);
	for (int i = 0; i < brightTrans.rows; i++) {
		for (int j = 0; j < brightTrans.cols; j++) {
			if (diffChannel.at<uchar>(i, j) >= ALPHA) correctedTrans.at<float>(i,j) = brightTrans.at<float>(i, j);
			else {
				correctedTrans.at<float>(i, j) = brightTrans.at<float>(i, j) * darkTrans.at<float>(i, j);
				printf("changed pixel\n");
			}
		}
	}
	return correctedTrans;
}

int main() {
	char fname[MAX_PATH];
	Mat originalImage, brightChannel, darkChannel, diffChannel, blueTransBright, redTransBright, greenTransBright, blueTransDark, redTransDark, greenTransDark;
	Mat blueTransCorrected, greenTransCorrected, redTransCorrected;
	Tatm atmospheric;
	while (openFileDlg(fname))
	{
		originalImage = imread(fname, CV_LOAD_IMAGE_COLOR);
		brightChannel = brightChannelPrior(originalImage);
		darkChannel = darkChannelPrior(originalImage);
		atmospheric = getAtmosphericLight(brightChannel, originalImage);
		
		blueTransBright = computeTrans(brightChannel, atmospheric, 0, 255);
		greenTransBright = computeTrans(brightChannel, atmospheric, 1, 255);
		redTransBright = computeTrans(brightChannel, atmospheric, 2, 255);
		transmissionView(blueTransBright, greenTransBright, redTransBright, "bright trans");
		
		diffChannel = differenceChannel(brightChannel, darkChannel);
		blueTransDark = computeTrans(darkChannel, atmospheric, 0 , 0);
		greenTransDark = computeTrans(darkChannel, atmospheric, 1, 0);
		redTransDark = computeTrans(darkChannel, atmospheric, 2, 0);
		
		
		blueTransCorrected = correctTransmission(diffChannel, blueTransBright, blueTransDark);
		greenTransCorrected = correctTransmission(diffChannel, greenTransBright, greenTransDark);
		redTransCorrected = correctTransmission(diffChannel, redTransBright, redTransDark);
		transmissionView(blueTransCorrected, greenTransCorrected, redTransCorrected, "corrected trans");
		
	}

	return 0;

}